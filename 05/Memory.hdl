// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 * This chip uses a normal register chip as a keyboard memory map to enable batch style testing.
 * to enable the Keyboard chip, uncomment line 43 and comment out lines 44 and 45.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    Not(in=address[14], out=isRamSelected);
    And(a=load, b=isRamSelected, out=loadRam);
    RAM16K(in=in, load=loadRam, address=address[0..13], out=ramOut);
    Not(in=address[13], out=notBit13);
    And(a=address[14], b=notBit13, out=isScreenSelected);
    And(a=load, b=isScreenSelected, out=loadScreen);
    Screen(in=in, load=loadScreen, address=address[0..12], out=screenOut);
    Or8Way(in=address[0..7], out=orRightSide);
    Or8Way(in[0..4]=address[8..12], out=orLeftSide);
    Or(a=orLeftSide, b=orRightSide, out=orNonKeyboardBits);
    Not(in=orNonKeyboardBits, out=keyboardAllZeros);
    And(a=address[14], b=address[13], out=possibleKeyboardSelected);
    And(a=possibleKeyboardSelected, b=keyboardAllZeros, out=isKeyboardSelected);
    // Keyboard(out=keyboardOut);
    And(a=load, b=isKeyboardSelected, out=loadKeyboard);
    Register(in=in, load=loadKeyboard, out=keyboardOut); // for non-interactive keyboard
    Or(a=isRamSelected, b=isKeyboardSelected, out=muxBit0);
    Or(a=isScreenSelected, b=isKeyboardSelected, out=muxBit1);
    Mux4Way16(a=false, b=ramOut, c=screenOut, d=keyboardOut, sel[0]=muxBit0, sel[1]=muxBit1, out=out);
}